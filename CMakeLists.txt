CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(tscpdk)

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(LIBTSCPDK_SRC_DIR ${PROJECT_SOURCE_DIR}/src/tscpdk)

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR})

AUX_SOURCE_DIRECTORY(${LIBTSCPDK_SRC_DIR} LIBTSCPDK_SRC)
AUX_SOURCE_DIRECTORY(${LIBTSCPDK_SRC_DIR}/lua LIBTSCPDK_SRC)

SET(LIBTSCPDK_H
    ${LIBTSCPDK_SRC_DIR}/TSBitmap.h
    ${LIBTSCPDK_SRC_DIR}/TSBitmap.inl
    ${LIBTSCPDK_SRC_DIR}/TSCPDK.h
    ${LIBTSCPDK_SRC_DIR}/TSDebug.h
    ${LIBTSCPDK_SRC_DIR}/TSDebug.inl
    ${LIBTSCPDK_SRC_DIR}/TSEpoll.h
    ${LIBTSCPDK_SRC_DIR}/TSEpoll.inl
    ${LIBTSCPDK_SRC_DIR}/TSHash.h
    ${LIBTSCPDK_SRC_DIR}/TSHash.inl
    ${LIBTSCPDK_SRC_DIR}/TSList.h
    ${LIBTSCPDK_SRC_DIR}/TSList.inl
    ${LIBTSCPDK_SRC_DIR}/TSMemory.h
    ${LIBTSCPDK_SRC_DIR}/TSMemory.inl
    ${LIBTSCPDK_SRC_DIR}/TSPlatform.h
    ${LIBTSCPDK_SRC_DIR}/TSPlatform.inl
    ${LIBTSCPDK_SRC_DIR}/TSProcess.h
    ${LIBTSCPDK_SRC_DIR}/TSProcess.inl
    ${LIBTSCPDK_SRC_DIR}/TSProtoType.h
    ${LIBTSCPDK_SRC_DIR}/TSProtoType.inl
    ${LIBTSCPDK_SRC_DIR}/TSRuntime.h
    ${LIBTSCPDK_SRC_DIR}/TSRuntime.inl
    ${LIBTSCPDK_SRC_DIR}/TSScriptEngine.h
    ${LIBTSCPDK_SRC_DIR}/TSScriptEngine.inl
    ${LIBTSCPDK_SRC_DIR}/TSSocket.h
    ${LIBTSCPDK_SRC_DIR}/TSSocket.inl
    ${LIBTSCPDK_SRC_DIR}/TSStream.h
    ${LIBTSCPDK_SRC_DIR}/TSStream.inl
    ${LIBTSCPDK_SRC_DIR}/TSString.h
    ${LIBTSCPDK_SRC_DIR}/TSString.inl
    ${LIBTSCPDK_SRC_DIR}/TSSynch.h
    ${LIBTSCPDK_SRC_DIR}/TSSynch.inl
    ${LIBTSCPDK_SRC_DIR}/TSThread.h
    ${LIBTSCPDK_SRC_DIR}/TSThread.inl
    ${LIBTSCPDK_SRC_DIR}/TSTimer.h
    ${LIBTSCPDK_SRC_DIR}/TSTimer.inl
    ${LIBTSCPDK_SRC_DIR}/TSUtil.h
    ${LIBTSCPDK_SRC_DIR}/TSUtil.inl
    ${LIBTSCPDK_SRC_DIR}/TSWorker.h
    ${LIBTSCPDK_SRC_DIR}/TSWorker.inl
)

SET(LIBTSCPDK_LUA_H
    ${LIBTSCPDK_SRC_DIR}/lua/TSLuaSocket.h
    ${LIBTSCPDK_SRC_DIR}/lua/TSLuaSocket.inl
    ${LIBTSCPDK_SRC_DIR}/lua/TSLuaNet.h
    ${LIBTSCPDK_SRC_DIR}/lua/TSLuaNet.inl
)

SET(LIBTSCPDK_SRC
    ${LIBTSCPDK_SRC}
    ${LIBTSCPDK_H}
    ${LIBTSCPDK_LUA_H}
)

LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})

ADD_LIBRARY(LIBTSCPDK_A STATIC ${LIBTSCPDK_SRC})
ADD_LIBRARY(LIBTSCPDK_SO SHARED ${LIBTSCPDK_SRC})

SET(LIBLUA ${PROJECT_SOURCE_DIR}/src/lua)
ADD_SUBDIRECTORY(${LIBLUA})

IF(WIN32)
    IF(UNIX)
        # CYGWIN
        ADD_DEFINITIONS(-DTSCPDK_CYGWIN)
    ELSE(UNIX)
        # MSVC
        ADD_DEFINITIONS(-DTSCPDK_MSVC)
        ADD_DEFINITIONS(-wd"4819")
        TARGET_LINK_LIBRARIES(LIBTSCPDK_A Ws2_32)
        TARGET_LINK_LIBRARIES(LIBTSCPDK_SO Ws2_32)
        
        # set third lib src path
        SET(LIBPTHREAD ${PROJECT_SOURCE_DIR}/src/platform/win32/pthread)
        
        # config third lib
        ADD_SUBDIRECTORY(${LIBPTHREAD})
        INCLUDE_DIRECTORIES(${LIBPTHREAD}/src)
        ADD_DEPENDENCIES(LIBTSCPDK_A LIBPTHREAD_SO)
        ADD_DEPENDENCIES(LIBTSCPDK_SO LIBPTHREAD_SO)
        
        TARGET_LINK_LIBRARIES(LIBTSCPDK_SO lua pthread)

    ENDIF(UNIX)
ELSEIF(UNIX)
    ADD_DEFINITIONS("-fPIC")
    ADD_DEFINITIONS("-std=c++11")
    TARGET_LINK_LIBRARIES(LIBTSCPDK_SO lua pthread dl rt)
ENDIF(WIN32)


INCLUDE_DIRECTORIES(
    ${LIBTSCPDK_SRC_DIR}
    ${LIBTSCPDK_SRC_DIR}/lua
    ${LIBLUA}/src
)



ADD_DEPENDENCIES(LIBTSCPDK_A LIBLUA_A)
ADD_DEPENDENCIES(LIBTSCPDK_SO LIBLUA_A)

TARGET_LINK_LIBRARIES(LIBTSCPDK_A lua pthread)

SET_TARGET_PROPERTIES(LIBTSCPDK_A PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
SET_TARGET_PROPERTIES(LIBTSCPDK_A PROPERTIES CLEAN_DIRECT_OUTPUT 1)

SET_TARGET_PROPERTIES(LIBTSCPDK_SO PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(LIBTSCPDK_SO PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
SET_TARGET_PROPERTIES(LIBTSCPDK_SO PROPERTIES VERSION 1.0 SOVERSION 1)

ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/examples)

#cmake -DCMAKE_INSTALL_PREFIX=

INSTALL(TARGETS LIBTSCPDK_A LIBTSCPDK_SO
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
)

INSTALL(FILES
    ${LIBTSCPDK_H} DESTINATION include/tscpdk
)

INSTALL(FILES
    ${LIBTSCPDK_LUA_H} DESTINATION include/tscpdk/lua
)


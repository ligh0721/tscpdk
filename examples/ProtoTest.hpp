// Generated by the ProtoType compiler.  DO NOT EDIT!
// File:      ProtoTest.hpp
// Create on: Wed Dec  4 01:06:33 2013
//

#ifndef __PROTOTEST_HPP__
#define __PROTOTEST_HPP__

#include <stdint.h>
#include <string.h>
#include <vector>

namespace tsproto
{

class CType_stHdr
{
public:
    CType_stHdr();
    ~CType_stHdr();

    uint16_t& wLength();
    uint16_t& wVersion();
    uint32_t& dwSequence();
    size_t GetNumberOf_acRecvered() const;
    uint8_t& acRecvered(size_t uIndex);

    size_t SerializeToArray(void* pBuf, size_t uBufSize);
    size_t ParseFromArray(const void* pBuf, size_t uBufSize);

protected:
    uint16_t m_wLength;
    uint16_t m_wVersion;
    uint32_t m_dwSequence;
    uint8_t m_acRecvered[8];
};

class CType_stField
{
public:
    CType_stField();
    ~CType_stField();

    uint16_t& wType();
    const uint16_t& wLen() const;
    size_t GetNumberOf_acBuf() const;
    uint8_t& acBuf(size_t uIndex);
    uint8_t& Add_cBuf();

    size_t SerializeToArray(void* pBuf, size_t uBufSize);
    size_t ParseFromArray(const void* pBuf, size_t uBufSize);

protected:
    uint16_t m_wType;
    uint16_t m_wLen;
    std::vector<uint8_t> m_acBuf;
};

class CType_stBody
{
public:
    CType_stBody();
    ~CType_stBody();

    const uint16_t& wCount() const;
    size_t GetNumberOf_astField() const;
    CType_stField& astField(size_t uIndex);
    CType_stField& Add_stField();

    size_t SerializeToArray(void* pBuf, size_t uBufSize);
    size_t ParseFromArray(const void* pBuf, size_t uBufSize);

protected:
    uint16_t m_wCount;
    std::vector<CType_stField> m_astField;
};

class CType_stPack
{
public:
    CType_stPack();
    ~CType_stPack();

    uint8_t& cStx0x0A();
    CType_stHdr& stHdr();
    CType_stBody& stBody();
    uint8_t& cEtx0x03();

    size_t SerializeToArray(void* pBuf, size_t uBufSize);
    size_t ParseFromArray(const void* pBuf, size_t uBufSize);

protected:
    uint8_t m_cStx0x0A;
    CType_stHdr m_stHdr;
    CType_stBody m_stBody;
    uint8_t m_cEtx0x03;
};

};



///////////////// - Inline Implementation - /////////////////

namespace tsproto
{

inline CType_stHdr::CType_stHdr()
: m_wLength(uint16_t()), m_wVersion(uint16_t()), m_dwSequence(uint32_t())
{
    memset(m_acRecvered, 0, sizeof(m_acRecvered));
}

inline CType_stHdr::~CType_stHdr()
{
}

inline uint16_t& CType_stHdr::wLength()
{
    return m_wLength;
}

inline uint16_t& CType_stHdr::wVersion()
{
    return m_wVersion;
}

inline uint32_t& CType_stHdr::dwSequence()
{
    return m_dwSequence;
}

inline size_t CType_stHdr::GetNumberOf_acRecvered() const
{
    return 8;
}

inline uint8_t& CType_stHdr::acRecvered(size_t uIndex)
{
    assert(uIndex < GetNumberOf_acRecvered());
    return m_acRecvered[uIndex];
}

inline size_t CType_stHdr::SerializeToArray(void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    char* pPos = (char*)pBuf + uSize;

    memcpy(pPos, &m_wLength, sizeof(m_wLength));
    pPos += sizeof(m_wLength);

    memcpy(pPos, &m_wVersion, sizeof(m_wVersion));
    pPos += sizeof(m_wVersion);

    memcpy(pPos, &m_dwSequence, sizeof(m_dwSequence));
    pPos += sizeof(m_dwSequence);

    memcpy(pPos, m_acRecvered, sizeof(m_acRecvered));
    pPos += sizeof(m_acRecvered);

    return (size_t)pPos - (size_t)pBuf;
}

inline size_t CType_stHdr::ParseFromArray(const void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    const char* pPos = (const char*)pBuf + uSize;

    memcpy(&m_wLength, pPos, sizeof(m_wLength));
    pPos += sizeof(m_wLength);

    memcpy(&m_wVersion, pPos, sizeof(m_wVersion));
    pPos += sizeof(m_wVersion);

    memcpy(&m_dwSequence, pPos, sizeof(m_dwSequence));
    pPos += sizeof(m_dwSequence);

    memcpy(m_acRecvered, pPos, sizeof(m_acRecvered));
    pPos += sizeof(m_acRecvered);

    return (size_t)pPos - (size_t)pBuf;
}

inline CType_stField::CType_stField()
: m_wType(uint16_t()), m_wLen(uint16_t())
{
}

inline CType_stField::~CType_stField()
{
}

inline uint16_t& CType_stField::wType()
{
    return m_wType;
}

inline const uint16_t& CType_stField::wLen() const
{
    return m_wLen;
}

inline size_t CType_stField::GetNumberOf_acBuf() const
{
    return m_acBuf.size();
}

inline uint8_t& CType_stField::acBuf(size_t uIndex)
{
    assert(uIndex < GetNumberOf_acBuf());
    return m_acBuf[uIndex];
}

inline uint8_t& CType_stField::Add_cBuf()
{
    m_acBuf.push_back(uint8_t());
    m_wLen = m_acBuf.size();
    return *(m_acBuf.end() - 1);
}

inline size_t CType_stField::SerializeToArray(void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    char* pPos = (char*)pBuf + uSize;

    memcpy(pPos, &m_wType, sizeof(m_wType));
    pPos += sizeof(m_wType);

    memcpy(pPos, &m_wLen, sizeof(m_wLen));
    pPos += sizeof(m_wLen);

    uSize = m_acBuf.size() * sizeof(uint8_t);
    memcpy(pPos, &m_acBuf[0], uSize);
    pPos += uSize;

    return (size_t)pPos - (size_t)pBuf;
}

inline size_t CType_stField::ParseFromArray(const void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    const char* pPos = (const char*)pBuf + uSize;

    memcpy(&m_wType, pPos, sizeof(m_wType));
    pPos += sizeof(m_wType);

    memcpy(&m_wLen, pPos, sizeof(m_wLen));
    pPos += sizeof(m_wLen);

    m_acBuf.resize(m_wLen);
    uSize = m_wLen * sizeof(uint8_t);
    memcpy(&m_acBuf[0], pPos, uSize);
    pPos += uSize;

    return (size_t)pPos - (size_t)pBuf;
}

inline CType_stBody::CType_stBody()
: m_wCount(uint16_t())
{
}

inline CType_stBody::~CType_stBody()
{
}

inline const uint16_t& CType_stBody::wCount() const
{
    return m_wCount;
}

inline size_t CType_stBody::GetNumberOf_astField() const
{
    return m_astField.size();
}

inline CType_stField& CType_stBody::astField(size_t uIndex)
{
    assert(uIndex < GetNumberOf_astField());
    return m_astField[uIndex];
}

inline CType_stField& CType_stBody::Add_stField()
{
    m_astField.push_back(CType_stField());
    m_wCount = m_astField.size();
    return *(m_astField.end() - 1);
}

inline size_t CType_stBody::SerializeToArray(void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    char* pPos = (char*)pBuf + uSize;

    memcpy(pPos, &m_wCount, sizeof(m_wCount));
    pPos += sizeof(m_wCount);

    for (size_t i = 0; i < GetNumberOf_astField(); ++i)
    {
        uSize = m_astField[i].SerializeToArray(pPos, uBufSize - (size_t)pPos + (size_t)pBuf);
        pPos += uSize;
    }

    return (size_t)pPos - (size_t)pBuf;
}

inline size_t CType_stBody::ParseFromArray(const void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    const char* pPos = (const char*)pBuf + uSize;

    memcpy(&m_wCount, pPos, sizeof(m_wCount));
    pPos += sizeof(m_wCount);

    m_astField.resize(m_wCount);
    for (size_t i = 0; i < m_astField.size(); ++i)
    {
        uSize = m_astField[i].ParseFromArray(pPos, uBufSize - (size_t)pPos + (size_t)pBuf);
        pPos += uSize;
    }

    return (size_t)pPos - (size_t)pBuf;
}

inline CType_stPack::CType_stPack()
: m_cStx0x0A(uint8_t()), m_cEtx0x03(uint8_t())
{
}

inline CType_stPack::~CType_stPack()
{
}

inline uint8_t& CType_stPack::cStx0x0A()
{
    return m_cStx0x0A;
}

inline CType_stHdr& CType_stPack::stHdr()
{
    return m_stHdr;
}

inline CType_stBody& CType_stPack::stBody()
{
    return m_stBody;
}

inline uint8_t& CType_stPack::cEtx0x03()
{
    return m_cEtx0x03;
}

inline size_t CType_stPack::SerializeToArray(void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    char* pPos = (char*)pBuf + uSize;

    memcpy(pPos, &m_cStx0x0A, sizeof(m_cStx0x0A));
    pPos += sizeof(m_cStx0x0A);

    uSize = m_stHdr.SerializeToArray(pPos, uBufSize - (size_t)pPos + (size_t)pBuf);
    pPos += uSize;

    uSize = m_stBody.SerializeToArray(pPos, uBufSize - (size_t)pPos + (size_t)pBuf);
    pPos += uSize;

    memcpy(pPos, &m_cEtx0x03, sizeof(m_cEtx0x03));
    pPos += sizeof(m_cEtx0x03);

    return (size_t)pPos - (size_t)pBuf;
}

inline size_t CType_stPack::ParseFromArray(const void* pBuf, size_t uBufSize)
{
    size_t uSize = 0;
    const char* pPos = (const char*)pBuf + uSize;

    memcpy(&m_cStx0x0A, pPos, sizeof(m_cStx0x0A));
    pPos += sizeof(m_cStx0x0A);

    uSize = m_stHdr.ParseFromArray(pPos, uBufSize - (size_t)pPos + (size_t)pBuf);
    pPos += uSize;

    uSize = m_stBody.ParseFromArray(pPos, uBufSize - (size_t)pPos + (size_t)pBuf);
    pPos += uSize;

    memcpy(&m_cEtx0x03, pPos, sizeof(m_cEtx0x03));
    pPos += sizeof(m_cEtx0x03);

    return (size_t)pPos - (size_t)pBuf;
}

};

#endif  //  __PROTOTEST_HPP__
